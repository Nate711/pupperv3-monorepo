#pragma once

#include <array>
#include <fstream>
#include <memory>
#include <optional>
#include <string>
#include <vector>

#include "controller_interface/controller_interface.hpp"
#include "rclcpp_lifecycle/node_interfaces/lifecycle_node_interface.hpp"
#include "rclcpp_lifecycle/state.hpp"
#include "realtime_tools/realtime_publisher.h"
#include "std_msgs/msg/float32_multi_array.hpp"
#include "std_srvs/srv/empty.hpp"
// auto-generated by generate_parameter_library
#include "animation_controller_parameters.hpp"

namespace animation_controller {

class AnimationController : public controller_interface::ControllerInterface {
 public:
  AnimationController();

  ~AnimationController() = default;

  controller_interface::InterfaceConfiguration command_interface_configuration() const override;

  controller_interface::InterfaceConfiguration state_interface_configuration() const override;

  controller_interface::CallbackReturn on_init() override;

  controller_interface::CallbackReturn on_configure(
      const rclcpp_lifecycle::State &previous_state) override;

  controller_interface::CallbackReturn on_activate(
      const rclcpp_lifecycle::State &previous_state) override;

  controller_interface::CallbackReturn on_deactivate(
      const rclcpp_lifecycle::State &previous_state) override;

  controller_interface::CallbackReturn on_error(
      const rclcpp_lifecycle::State &previous_state) override;

  controller_interface::return_type update(const rclcpp::Time &time,
                                           const rclcpp::Duration &period) override;

  /* ----------------- Constants ----------------- */
  static constexpr int kActionSize = 12;
  /* -------------------------------------------- */                                         

 protected:
  bool load_animation_csv();
  bool check_param_vector_size();
  void interpolate_keyframes(double alpha, size_t frame_a, size_t frame_b, std::array<double, kActionSize>& result);

  std::shared_ptr<ParamListener> param_listener_;
  Params params_;

  // Animation data loaded from CSV
  std::vector<std::array<double, kActionSize>> animation_keyframes_;
  
  // Playback state
  std::optional<rclcpp::Time> animation_start_time_;
  double current_animation_time_ = 0.0;
  size_t current_frame_index_ = 0;
  bool animation_active_ = false;
  bool animation_loop_ = false;
  
  // Target joint positions for current frame
  std::array<double, kActionSize> target_positions_ = {};
  
  // Initial joint positions (for smooth startup)
  std::array<double, kActionSize> init_joint_pos_ = {};

  // Map from joint names to command types to command interfaces
  std::map<
      std::string,
      std::map<std::string, std::reference_wrapper<hardware_interface::LoanedCommandInterface>>>
      command_interfaces_map_;

  // Map from joint names to state types to state interfaces
  std::map<std::string,
           std::map<std::string, std::reference_wrapper<hardware_interface::LoanedStateInterface>>>
      state_interfaces_map_;

  // Service for controlling playback
  rclcpp::Service<std_srvs::srv::Empty>::SharedPtr play_animation_service_;
  rclcpp::Service<std_srvs::srv::Empty>::SharedPtr stop_animation_service_;
  rclcpp::Service<std_srvs::srv::Empty>::SharedPtr reset_animation_service_;

  // Publisher for current animation frame
  using AnimationStateMsg = std_msgs::msg::Float32MultiArray;
  std::shared_ptr<realtime_tools::RealtimePublisher<AnimationStateMsg>> rt_animation_state_publisher_ = nullptr;
  rclcpp::Publisher<AnimationStateMsg>::SharedPtr animation_state_publisher_ = nullptr;

  rclcpp::Time init_time_;
  bool estop_active_ = false;
};

}  // namespace animation_controller